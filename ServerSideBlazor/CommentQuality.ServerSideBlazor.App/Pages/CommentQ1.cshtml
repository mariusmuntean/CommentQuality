@page "/commentq1"

@using CommentQuality.Core.Interfaces
@using CommentQuality.Core.Models
@using CommentQuality.Core.Services
@using CommentQuality.Core.Stuff
@using ChartJs.Blazor.ChartJS
@using ChartJs.Blazor.Shared

@*@inject HttpClient HttpClient*@

<h1>Comment Quality #1</h1>

<input bind="@_videoId"/>
<button onclick="@GetComments">Go</button>


<div class="row" style="margin: 10px 0px">
    <button class="btn btn-primary" onclick="@UpdateChart">Update Chart </button>
</div>
<ChartJsDoughnutChart ref="_doughnutChart" Chart="@BlazorDoughnutChart" Width="600" Height="300"/>

<table class="table">
    <thead>
    <tr>
        <th>Out</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var line in Lines)
    {
        <tr>
            <td>@line</td>
        </tr>
    }
    </tbody>
</table>


@functions
{
    List<string> Lines { get; set; } = new List<string>();

    string _videoId = string.Empty;


    public ChartJSChart BlazorDoughnutChart { get; set; }
    ChartJsDoughnutChart _doughnutChart;

    public List<double> CommentSentiments { get; set; } = new List<double>();


    public async void GetComments()
    {
        Lines.Clear();
        Console.WriteLine($"VideoId: {_videoId}");
        await ProcessComments().ConfigureAwait(false);
    }

    public async Task ProcessComments()
    {
    //var restApi = new RestApi(HttpClient);
        var restApi = new RestApi();
        var commentThreadIterator = new CommentThreadIterator(restApi);
        var commentThreadProvider = new CommentThreadProvider(commentThreadIterator);

        var commentProcessor = new CommentProcessor(restApi, commentThreadProvider, NewSentimentAnalyzer(restApi));
        var timeBeforeAnalysis = DateTime.UtcNow;
        var averagesSummed = 0.0d;
        var processedCommentsCount = 0;
        await commentProcessor.ProcessCommentsAsync(_videoId, (CommentBatchResult commentBatchResult) =>
        {
            var docsInBatch = commentBatchResult.DocumentBatchSentiment.Documents.Count;
            var sentimentAverage = commentBatchResult.DocumentBatchSentiment.Documents.Sum((arg) => arg.Score);
            var batchSentiment = sentimentAverage / docsInBatch;

            CommentSentiments.AddRange(commentBatchResult.DocumentBatchSentiment.Documents.Select(sentiment => sentiment.Score));
            UpdateChart();

            averagesSummed += sentimentAverage;
            processedCommentsCount += commentBatchResult.DocumentBatchSentiment.Documents.Count;

            var msg = $"Processed {commentBatchResult.ProcessedCommentCount} from {commentBatchResult.TotalCommentCount} comments.";
            AppendTextAndScroll(msg);
        }).ConfigureAwait(false);

        var duration = DateTime.UtcNow.Subtract(timeBeforeAnalysis);
        await Task.Delay(500).ConfigureAwait(false);
        AppendTextAndScroll($"Average sentiment score is {averagesSummed / processedCommentsCount:0.####}");
        await Task.Delay(500).ConfigureAwait(false);
        AppendTextAndScroll($"Sentiment analysis took {duration.TotalSeconds:0.##} seconds");
    }

    private static IDocumentBatchSentimentAnalyzer NewSentimentAnalyzer(RestApi restApi)
    {
        return new DummyDocumentBatchSentimentAnalyzer();

    //return new AzureCognitiveServicesDocumentBatchSentimentAnalyzer(restApi);
    //return new GoogleCloudLanguageServiceDocumentBatchSentimentAnalyzer(restApi);
    }

    private void AppendTextAndScroll(string text)
    {
        Lines.Add(text);
        Console.WriteLine($"Printing: '{text}'");
        this.StateHasChanged();
    }

    protected override void OnInit()
    {
        var yayColor = "#56B4E9";
        var nayColor = "#ff6384";
        BlazorDoughnutChart = BlazorDoughnutChart ?? new ChartJSChart()
        {
            ChartType = ChartTypes.LINE.ToString(),
            CanvasId = "Line chart",
            Options = new ChartJsOptions()
            {
                Display = true,
                Text = "Options text",
                Responsive = true
            },
            Data = new ChartJsData()
            {
                Labels = new List<string>() {"Nay!", "Yay!"},
                Datasets = new List<ChartJsDataset>
                {
                    new ChartJsDoughnutDataset
                    {
                        BackgroundColor = new[] {nayColor, yayColor},
                        Label = "Comment Opinion",
                        Data = new List<dynamic>
                        {
                            1, 1
                        },
                        BorderWidth = 0,
                        HoverBackgroundColor = new[] {nayColor, yayColor},
                        HoverBorderColor = new[] {nayColor, yayColor},
                        HoverBorderWidth = new[] {1, 1},
                        BorderColor = new[] {"#ffffff", "#ffffff"}
                    }
                }
            }
        };
    }

    protected override void OnAfterRender()
    {
        _doughnutChart.UpdateChart(BlazorDoughnutChart);
    }

    public void UpdateChart()
    {
        var chartJsDoughnutDataset = BlazorDoughnutChart.Data.Datasets.First() as ChartJsDoughnutDataset;

        var nays = CommentSentiments.Count(d => d < 0.5);
        var yays = CommentSentiments.Count(d => d >= 0.5);
        chartJsDoughnutDataset.Data.Clear();
        chartJsDoughnutDataset.Data.AddRange(new List<dynamic> {nays, yays});
    }

}